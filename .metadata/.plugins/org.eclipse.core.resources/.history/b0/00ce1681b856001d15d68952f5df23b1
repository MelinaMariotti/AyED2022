
#ifndef _MAIN
#define _MAIN

#include <iostream>
#include "biblioteca/funciones/strings.hpp"
#include "biblioteca/funciones/tokens.hpp"
#include "biblioteca/funciones/files.hpp"
#include "biblioteca/tads/Array.hpp"
#include "biblioteca/tads/Map.hpp"
#include "biblioteca/tads/List.hpp"
#include "biblioteca/tads/Stack.hpp"
#include "biblioteca/tads/Queue.hpp"
#include "biblioteca/tads/Coll.hpp"
using namespace std;

// -----EJERCICIO DE LA EMPRESA PIRAMIDAL ---------


/*
                     $1.000       -  precio total de la venta
                        |
                        | 30% comision
                        |
                      $300
                  /            \
70% de comision  /              \   30% de comision
                /                \
              $210              $90
                |                 |
          para el socio     para el referido
*/

//proceso de a 1 socio
void procesarVenta(Venta venta, Map<int,RSocio> mapSocios){

   //RSocio = wRappSocio es != a registroSocio
   //obtengo al socio para (obj 1 y 2):
   RSocio* registroSocio = mapGetValue(mapSocios,venta.idSocio);

   //1er objetivo - liquidarle el 30% del 70% de comision del total $venta almacenada en <Venta venta>
   registroSocio->acumComision += venta.importe*0.30*0.70;

   //2do obj acum haciendo una sumatoria del $valor de c/venta
   registroSocio->acumPrecioVentas += venta.importe;



}

int main()
{

   Map<int,RSocio> mapSocios = subirAMeoria();

   FILE* f = fopen("VENTAS.dat","r+b");

   Venta venta = read<Venta>(f);

   while( !feof(f) ){

   }


   fclose(f);

   return 0;
} //END MAIN

#endif
